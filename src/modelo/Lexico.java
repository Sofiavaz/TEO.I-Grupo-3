// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: ./../jflex/Lexico.flex

/* ------------------------------------------------------------------ */
/* Importaciones */
/* ------------------------------------------------------------------ */

package modelo;
import jflex.core.sym; // Necesario para el m√©todo next_token(). 
import java.util.ArrayList;
import vista.Vista;
import java_cup.runtime.*;


/* ------------------------------------------------------------------ */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\0\2\1\22\0\1\1\1\0\1\2"+
    "\5\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\12\13\1\14\1\15\1\16\1\17\1\20\2\0"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\2\22\1\32\1\33\1\34\1\35\1\36\1\22"+
    "\1\37\1\40\1\41\2\22\1\42\3\22\1\43\1\0"+
    "\1\44\1\0\1\45\1\0\1\21\1\22\1\23\1\24"+
    "\1\46\1\26\1\27\1\30\1\31\2\22\1\32\1\33"+
    "\1\34\1\35\1\36\1\22\1\37\1\40\1\41\2\22"+
    "\1\42\3\22\1\47\1\0\1\50\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\1\1\1\13\1\14"+
    "\1\1\1\15\12\16\1\17\1\20\1\21\1\22\1\0"+
    "\1\23\1\24\2\0\1\25\1\26\1\27\1\30\1\31"+
    "\5\16\1\32\1\16\1\33\5\16\2\0\1\34\1\35"+
    "\4\16\1\36\5\16\1\0\1\24\2\0\1\16\1\37"+
    "\7\16\1\24\2\0\6\16\1\40\1\41\1\42\1\0"+
    "\5\16\3\0\5\16\1\0\1\42\1\0\2\16\1\43"+
    "\3\0\2\16\2\0\2\16\21\0\1\44\2\0\1\45"+
    "\4\0\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\51\0\122\0\51\0\51\0\51\0\51"+
    "\0\51\0\51\0\173\0\244\0\315\0\366\0\51\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\51\0\51\0\51\0\51"+
    "\0\122\0\51\0\u0334\0\u035d\0\u0386\0\51\0\51\0\51"+
    "\0\51\0\51\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u01c3"+
    "\0\u047c\0\u01c3\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572"+
    "\0\u059b\0\51\0\u01c3\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u01c3"+
    "\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787"+
    "\0\u07b0\0\u07d9\0\u01c3\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6"+
    "\0\u08cf\0\u08f8\0\51\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5"+
    "\0\u09ee\0\u0a17\0\u0a40\0\u01c3\0\u01c3\0\51\0\u0a69\0\u0a92"+
    "\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda"+
    "\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0b5f\0\u0cd0\0\u0cf9"+
    "\0\u0d22\0\u01c3\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18"+
    "\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60"+
    "\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8"+
    "\0\u10d1\0\u10fa\0\u1123\0\u114c\0\51\0\u1175\0\u119e\0\51"+
    "\0\u11c7\0\u11f0\0\u1219\0\u1242\0\51\0\51";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\24\1\25\1\26\1\27\2\24\1\30"+
    "\3\24\1\31\1\32\1\24\1\33\1\24\1\34\1\35"+
    "\1\36\1\2\1\26\1\37\1\40\51\0\2\41\1\42"+
    "\46\41\13\0\1\43\47\0\1\44\47\0\1\43\1\0"+
    "\1\15\51\0\1\45\2\0\1\46\50\0\1\47\1\50"+
    "\47\0\1\51\50\0\1\52\44\0\1\24\5\0\13\24"+
    "\1\53\6\24\2\0\2\24\15\0\1\24\5\0\22\24"+
    "\2\0\2\24\15\0\1\24\5\0\4\24\1\54\15\24"+
    "\2\0\1\24\1\54\15\0\1\24\5\0\11\24\1\55"+
    "\1\24\1\56\6\24\2\0\2\24\15\0\1\24\5\0"+
    "\11\24\1\57\10\24\2\0\2\24\15\0\1\24\5\0"+
    "\5\24\1\60\5\24\1\61\6\24\2\0\2\24\15\0"+
    "\1\24\5\0\16\24\1\62\3\24\2\0\2\24\15\0"+
    "\1\24\5\0\14\24\1\63\1\24\1\64\3\24\2\0"+
    "\2\24\15\0\1\24\5\0\20\24\1\65\1\24\2\0"+
    "\2\24\15\0\1\24\5\0\7\24\1\66\6\24\1\67"+
    "\3\24\2\0\2\24\15\0\1\43\32\0\1\70\7\0"+
    "\1\71\62\0\1\72\44\0\1\24\5\0\3\24\1\73"+
    "\16\24\2\0\2\24\15\0\1\24\5\0\2\24\1\74"+
    "\17\24\2\0\2\24\15\0\1\24\5\0\17\24\1\75"+
    "\2\24\2\0\2\24\15\0\1\24\5\0\3\24\1\76"+
    "\16\24\2\0\2\24\15\0\1\24\5\0\14\24\1\77"+
    "\5\24\2\0\2\24\15\0\1\24\5\0\20\24\1\100"+
    "\1\24\2\0\2\24\15\0\1\24\5\0\17\24\1\101"+
    "\2\24\2\0\2\24\15\0\1\24\5\0\14\24\1\102"+
    "\5\24\2\0\2\24\15\0\1\24\5\0\16\24\1\103"+
    "\3\24\2\0\2\24\15\0\1\24\5\0\10\24\1\104"+
    "\11\24\2\0\2\24\15\0\1\24\5\0\10\24\1\105"+
    "\11\24\2\0\2\24\10\0\1\106\1\0\1\106\2\0"+
    "\1\107\35\0\5\71\1\110\4\71\1\111\36\71\13\0"+
    "\1\24\5\0\11\24\1\112\10\24\2\0\2\24\15\0"+
    "\1\24\5\0\4\24\1\113\15\24\2\0\1\24\1\113"+
    "\15\0\1\24\5\0\3\24\1\114\11\24\1\115\4\24"+
    "\2\0\2\24\15\0\1\24\5\0\1\61\21\24\2\0"+
    "\2\24\15\0\1\24\5\0\10\24\1\116\11\24\2\0"+
    "\2\24\15\0\1\24\5\0\6\24\1\117\13\24\2\0"+
    "\2\24\15\0\1\24\5\0\10\24\1\120\11\24\2\0"+
    "\2\24\15\0\1\24\5\0\11\24\1\121\10\24\2\0"+
    "\2\24\15\0\1\24\5\0\20\24\1\122\1\24\2\0"+
    "\2\24\15\0\1\107\50\0\1\123\47\0\1\124\36\0"+
    "\5\71\1\110\4\71\1\125\36\71\13\0\1\24\5\0"+
    "\1\126\21\24\2\0\2\24\15\0\1\24\5\0\4\24"+
    "\1\127\15\24\2\0\1\24\1\127\15\0\1\24\5\0"+
    "\16\24\1\130\3\24\2\0\2\24\15\0\1\24\5\0"+
    "\20\24\1\131\1\24\2\0\2\24\15\0\1\24\5\0"+
    "\16\24\1\132\3\24\2\0\2\24\15\0\1\24\5\0"+
    "\13\24\1\133\6\24\2\0\2\24\15\0\1\24\5\0"+
    "\4\24\1\134\15\24\2\0\1\24\1\134\15\0\1\24"+
    "\5\0\4\24\1\135\15\24\2\0\1\24\1\135\14\0"+
    "\1\136\36\0\5\71\1\137\4\71\1\125\36\71\13\0"+
    "\1\24\5\0\16\24\1\140\3\24\2\0\2\24\15\0"+
    "\1\24\5\0\2\24\1\141\17\24\2\0\2\24\15\0"+
    "\1\24\5\0\14\24\1\142\5\24\2\0\2\24\15\0"+
    "\1\24\5\0\10\24\1\143\11\24\2\0\2\24\15\0"+
    "\1\24\5\0\1\144\21\24\2\0\2\24\15\0\1\24"+
    "\5\0\6\24\1\100\13\24\2\0\2\24\2\0\5\145"+
    "\1\146\4\145\1\147\36\145\13\0\1\24\5\0\4\24"+
    "\1\150\15\24\2\0\1\24\1\150\15\0\1\24\5\0"+
    "\11\24\1\151\10\24\2\0\2\24\15\0\1\24\5\0"+
    "\6\24\1\152\13\24\2\0\2\24\15\0\1\24\5\0"+
    "\14\24\1\153\5\24\2\0\2\24\15\0\1\24\5\0"+
    "\12\24\1\154\7\24\2\0\2\24\2\0\5\145\1\146"+
    "\43\145\12\0\1\155\36\0\5\145\1\146\4\145\1\156"+
    "\36\145\11\0\1\157\1\0\1\24\5\0\22\24\2\0"+
    "\2\24\15\0\1\24\5\0\1\160\21\24\2\0\2\24"+
    "\15\0\1\24\5\0\16\24\1\161\3\24\2\0\2\24"+
    "\15\0\1\24\5\0\13\24\1\162\6\24\2\0\2\24"+
    "\13\0\1\163\1\0\1\24\5\0\22\24\2\0\2\24"+
    "\14\0\1\164\76\0\1\165\23\0\1\24\5\0\16\24"+
    "\1\166\3\24\2\0\2\24\15\0\1\24\5\0\1\167"+
    "\21\24\2\0\2\24\42\0\1\170\10\0\5\164\1\110"+
    "\43\164\25\0\1\171\20\0\1\171\15\0\1\24\5\0"+
    "\4\24\1\172\15\24\2\0\1\24\1\172\15\0\1\24"+
    "\5\0\12\24\1\173\7\24\2\0\2\24\27\0\1\174"+
    "\20\0\1\174\25\0\1\175\36\0\1\176\1\0\1\24"+
    "\5\0\22\24\2\0\2\24\13\0\1\177\1\0\1\24"+
    "\5\0\22\24\2\0\2\24\25\0\1\200\66\0\1\201"+
    "\47\0\1\202\50\0\1\203\51\0\1\204\40\0\1\205"+
    "\44\0\1\206\20\0\1\206\27\0\1\207\20\0\1\207"+
    "\33\0\1\210\54\0\1\211\36\0\1\212\50\0\1\213"+
    "\62\0\1\214\47\0\1\215\55\0\1\216\50\0\1\217"+
    "\43\0\1\220\45\0\1\221\50\0\1\222\54\0\1\223"+
    "\50\0\1\224\47\0\1\225\50\0\1\226\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4715];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\6\11\4\1\1\11\15\1\4\11"+
    "\1\0\1\11\1\1\2\0\5\11\15\1\2\0\1\11"+
    "\13\1\1\0\1\1\2\0\11\1\1\11\2\0\10\1"+
    "\1\11\1\0\5\1\3\0\5\1\1\0\1\1\1\0"+
    "\3\1\3\0\2\1\2\0\2\1\21\0\1\11\2\0"+
    "\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	// Valores m√°ximos.
	private final int STR_MAX_LEN = 32;  // Son 32 porque contamos las doble comillas de apertura y cierre.
	private final int INT_MAX_LEN = 65536;
	private ArrayList<Token> listaTokens = new ArrayList<Token>();
	private Vista vista;
	
	// Tabla de s√≠mbolos.
	// private List<Map<Columna, String>> symtbl;
	
	// Verifica la cantidad de bits del entero recibido como String.
	private boolean checkInt(String s) {
	
		// Verifico que s no est√© vac√≠a, o tenga m√°s de 5 d√≠gitos.
		if (s.isEmpty() || s.length() > 5) {
			return false;
		}
		
		try {
		
			// Convierto a integer.
			Integer number = Integer.valueOf(s);
			
			// Verifico que no exceda el m√°ximo valor.
			if (number > INT_MAX_LEN) {
				return false;
			}
			
		} catch(Exception e) {
			vista.agregarLinea("Error parseando lexema " + yytext() + ".");
			vista.agregarLinea(e.toString());
			return false;
		}
		
		return true;
	}

	// Verifica la cantidad de bits del float recibido como String.
	private boolean checkFloat(String s) {
	
		// Verifico que el string no est√© vac√≠o.
		if (s.isEmpty()) {
			return false;
		}
		
		try {
		
			// Convierto a float. Si se convierte, el valor est√° dentro
			// de los valores aceptables para el tipo float de Java.
			float numero = Float.valueOf(s);
			
			if(
				numero == Float.POSITIVE_INFINITY
				||
				numero == Float.NEGATIVE_INFINITY
				||
				Math.abs(numero) < Float.MIN_VALUE
			) return false;  
			
		} catch(Exception e) {
			vista.agregarLinea("Error parseando lexema " + yytext() + ".");
			vista.agregarLinea(e.toString());
			return false;
		}
		
		return true;
	}
	
	// Verifica que el String no tenga m√°s de 30 caracteres.
	private boolean checkStr(String s) {
		if (s.isEmpty() || (s.length() > STR_MAX_LEN)) {
			return false;
		}
		
		return true;
	}
	
	// Imprime cada par token:lexema hallado.
	private void anuncio(String token) {
		vista.agregarLinea("*** Nuevo hallazgo ***");
		if(token.equals("CONST_STR"))
			vista.agregarLinea("\tToken = " + token + "\n\tLexema = '" + yytext() + "'\n");
		else
			vista.agregarLinea("\tToken = " + token + "\n\tLexema = " + yytext() + "\n");	
	}
	
	// Comunica que se encontr√≥ un lexema inv√°lido.
	private void anunciarError(String mensaje) {
		vista.limpiarSalida();
		listaTokens.clear();
		vista.agregarLinea("¬°Lexema inv√°lido!");
		vista.agregarLinea("\t" + mensaje + "\n");
		throw new Error(mensaje);
	}
	
	// Guarda el par token:lexema en la lista de Tokens interna,
	// si no est√° duplicado.
	private void guardoToken(String token) {
		String lexema = yytext();
		
		switch(token) {
			case "CONST_STR":
				// Si es String recorta las comillas para
				// que no sean parte del lexema.
				lexema = lexema.substring(1, lexema.length() - 1);
			case "CONST_INT":
			case "CONST_FLOAT":
			case "ID_VAR":
				// Si es una constante o un identificador:
				
				boolean hayDuplicado = false;
				int indice = 0;
				while(!hayDuplicado && indice < listaTokens.size()) {
					if(
						listaTokens.get(indice).getNombreToken().equals(token)
						&&
						listaTokens.get(indice).getLexema().equals(lexema)
					) hayDuplicado = true;
					else indice++;
				} 

				// Si no hay duplicado, guarda el token.
				if(!hayDuplicado) listaTokens.add(new Token(token, lexema));

				break;
			default:
				// Cualquier otro token, lo agrega.
				listaTokens.add(new Token(token, lexema));
								
				break;
		}
	}
	
	// Permite obtener la lista de pares token:lexema.
	public ArrayList<Token> getListaTokens() {
		return listaTokens;
	}
	
	// Permite vincular una vista.
	public void agregarVista(Vista actual) {
		vista = actual;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { anunciarError("Lexema '" + yytext() + "' no permitido, en la l√≠nea " + this.yyline + ", y columna " + this.yycolumn + ".");
            }
            // fall through
          case 40: break;
          case 2:
            { /* no hacer nada */
            }
            // fall through
          case 41: break;
          case 3:
            { return new Symbol(sym.PAR_ABRE, yytext());
            }
            // fall through
          case 42: break;
          case 4:
            { return new Symbol(sym.PAR_CIERRA, yytext());
            }
            // fall through
          case 43: break;
          case 5:
            { return new Symbol(sym.MULTIPLICA, yytext());
            }
            // fall through
          case 44: break;
          case 6:
            { return new Symbol(sym.SUMA, yytext());
            }
            // fall through
          case 45: break;
          case 7:
            { return new Symbol(sym.COMA, yytext());
            }
            // fall through
          case 46: break;
          case 8:
            { return new Symbol(sym.RESTA, yytext());
            }
            // fall through
          case 47: break;
          case 9:
            { return new Symbol(sym.DIVIDE, yytext());
            }
            // fall through
          case 48: break;
          case 10:
            { if (!checkInt(yytext())) {
									anunciarError("Lexema " + yytext() + " excede el valor m√°ximo de un Integer (" + INT_MAX_LEN + ").\n");	
								} else {
									return new Symbol(sym.CONST_INT, yytext());
								}
            }
            // fall through
          case 49: break;
          case 11:
            { return new Symbol(sym.PUNTO_COMA, yytext());
            }
            // fall through
          case 50: break;
          case 12:
            { return new Symbol(sym.MENOR, yytext());
            }
            // fall through
          case 51: break;
          case 13:
            { return new Symbol(sym.MAYOR, yytext());
            }
            // fall through
          case 52: break;
          case 14:
            { return new Symbol(sym.ID_VAR, yytext());
            }
            // fall through
          case 53: break;
          case 15:
            { return new Symbol(sym.COR_ABRE, yytext());
            }
            // fall through
          case 54: break;
          case 16:
            { return new Symbol(sym.COR_CIERRA, yytext());
            }
            // fall through
          case 55: break;
          case 17:
            { return new Symbol(sym.LLAVE_ABRE, yytext());
            }
            // fall through
          case 56: break;
          case 18:
            { return new Symbol(sym.LLAVE_CIERRA, yytext());
            }
            // fall through
          case 57: break;
          case 19:
            { anuncio("CONST_STR");
								if (!checkStr(yytext())) {
									anunciarError("Lexema " + yytext() + " excede la longitud m√°xima de un String (" + (STR_MAX_LEN - 2) + ").\n");		
								} else {
									return new Symbol(sym.CONST_STR, yytext());
								}
            }
            // fall through
          case 58: break;
          case 20:
            { anuncio("CONST_FLOAT");
								if (!checkFloat(yytext())) {
									anunciarError("Lexema " + yytext() + " est√° fuera de los rangos permitidos para un float.\n");	
								} else {
									return new Symbol(sym.CONST_FLOAT, yytext());
								}
            }
            // fall through
          case 59: break;
          case 21:
            { return new Symbol(sym.ASIGNA_TIPO, yytext());
            }
            // fall through
          case 60: break;
          case 22:
            { return new Symbol(sym.MENOR_IGUAL, yytext());
            }
            // fall through
          case 61: break;
          case 23:
            { return new Symbol(sym.DISTINTO, yytext());
            }
            // fall through
          case 62: break;
          case 24:
            { return new Symbol(sym.IGUAL, yytext());
            }
            // fall through
          case 63: break;
          case 25:
            { return new Symbol(sym.MAYOR_IGUAL, yytext());
            }
            // fall through
          case 64: break;
          case 26:
            { return new Symbol(sym.IF, yytext());
            }
            // fall through
          case 65: break;
          case 27:
            { return new Symbol(sym.OR, yytext());
            }
            // fall through
          case 66: break;
          case 28:
            { return new Symbol(sym.ASIGNA_VAR, yytext());
            }
            // fall through
          case 67: break;
          case 29:
            { return new Symbol(sym.AND, yytext());
            }
            // fall through
          case 68: break;
          case 30:
            { return new Symbol(sym.TIPO_DATO, yytext());
            }
            // fall through
          case 69: break;
          case 31:
            { return new Symbol(sym.ELSE, yytext());
            }
            // fall through
          case 70: break;
          case 32:
            { return new Symbol(sym.WHILE, yytext());
            }
            // fall through
          case 71: break;
          case 33:
            { return new Symbol(sym.WRITE, yytext());
            }
            // fall through
          case 72: break;
          case 34:
            { 
            }
            // fall through
          case 73: break;
          case 35:
            { return new Symbol(sym.POSITION, yytext());
            }
            // fall through
          case 74: break;
          case 36:
            { return new Symbol(sym.SEC_COMIENZO, yytext());
            }
            // fall through
          case 75: break;
          case 37:
            { return new Symbol(sym.PROG_COMIENZO, yytext());
            }
            // fall through
          case 76: break;
          case 38:
            { return new Symbol(sym.SEC_FIN, yytext());
            }
            // fall through
          case 77: break;
          case 39:
            { return new Symbol(sym.PROG_FIN, yytext());
            }
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
