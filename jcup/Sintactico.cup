/* Imports. */
package modelo;
import vista.VistaPrincipal;
import java.util.TreeMap;
import java.util.LinkedList;
import java.util.Stack;
import java_cup.runtime.*;

parser code {:
  private VistaPrincipal vista;
  private Tabla tabla;
  private TreeMap paresIdTipo = new TreeMap<String, String>();
  private LinkedList<String> colaIds;
  private Stack<String> pilaTipos;

  // Genera un error porque un identificador aparece más de
  // una vez en las declaraciones de tipo.
  private void errDeclIdDupl(String id) {
    String msj = "\nEl identificador " + id + " aparece más de una"
    + " vez en la sección de declaraciones.";

    vista.agregarLinea(msj);
    throw new Error(msj);
  }

  private void cargarTiposDeVariablesEnTabla() {
    tabla.cargarTiposDeVariables(paresIdTipo);
  }

  // Vincula esta clase con una vista.
  public void agregarVista(VistaPrincipal actual) {
    vista = actual;
  }

  public void vincularTabla(Tabla tabla) {
    this.tabla = vista.getTablaDeSimbolos();
  }

  public void syntax_error(Symbol s) {
    String msj = "\nError en línea " + s.right + ", columna " + s.left + ". "
    + s + " no reconocido, con valor " + s.value;

    vista.agregarLinea(msj);
    throw new Error(msj);
  }
:}

action code
{:
  // Imprime las reglas encontradas en la ventana de la vista.
  private void anuncio(String msj) {
    vista.agregarLinea(msj);
  }

  private void inicializarPilaYCola() {
    colaIds = new LinkedList<String>();
    pilaTipos = new Stack<String>();
  }

  // Guarda los pares ID:Tipo que están en la cola y la pila,
  // en el mapa paresIdTipo, si no hay duplicados.
  // Si hay duplicados, genera un error.
  private void procesarIdsYTipos() {
    String idActual;
    String tipoActual;

    // Construye el mapa con los nombres de identificadores como
    // clave, y los tipos como valores.
    while (colaIds.size() > 0) {
      idActual = colaIds.poll();
      tipoActual = pilaTipos.pop();
      if (paresIdTipo.containsKey(idActual))
        errDeclIdDupl(idActual);
      else
        paresIdTipo.put(idActual, tipoActual);
    }
  }

  // Verifica que el identificador tenga un tipo declarado.
  // Si no lo tiene, genera un error.
  private void verificarTipo(String identificador) {
    if (!tabla.idEstaDeclarado(identificador)) {
      String msj = "\nError: el identificador " + identificador + " no tiene tipo declarador.";

      vista.agregarLinea(msj);
      throw new Error(msj);
    }
  }
:}

/* Símbolos terminales. */
terminal SEC_COMIENZO, SEC_FIN, PROG_COMIENZO, PROG_FIN;
terminal POSITION, WRITE;
terminal IF, ELSE, WHILE;
terminal TIPO_DATO, CONST_INT, CONST_FLOAT, CONST_STR, ID_VAR, ASIGNA_VAR, ASIGNA_TIPO;
terminal IGUAL, DISTINTO, MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL, AND, OR;
terminal SUMA, RESTA, DIVIDE, MULTIPLICA;
terminal PAR_ABRE, PAR_CIERRA, LLAVE_ABRE, LLAVE_CIERRA, COR_ABRE, COR_CIERRA, PUNTO_COMA, COMA;

/* Símbolos no terminales. */
non terminal programa, seccion_de_declaraciones, seccion_de_programa;
non terminal declaraciones, declaracion, otros_tipos;
non terminal conjunto_de_sentencias, sentencia, asignacion, seleccion, iteracion, nt_write, else;
non terminal condicion, comparacion, expresion, comparador;
non terminal termino, factor;
non terminal position, lista_enteros, mas_enteros;

/* Símbolo distinguido. */
start with programa;

/* GLC */
programa ::= seccion_de_declaraciones seccion_de_programa {: anuncio("Regla 0: programa ::= seccion_de_declaraciones seccion_de_programa."); :};

seccion_de_declaraciones ::=

  SEC_COMIENZO declaraciones SEC_FIN
  {:
    anuncio("Regla 1: seccion_de_declaraciones ::= SEC_COMIENZO declaraciones SEC_FIN.");
    tabla.cargarTiposDeVariables(paresIdTipo);
  :}

  | SEC_COMIENZO SEC_FIN {: anuncio("Regla 2: seccion_de_declaraciones ::= SEC_COMIENZO SEC_FIN."); :}
;

declaraciones ::=
  declaracion declaraciones {: anuncio("Regla 3: declaraciones ::= declaracion declaraciones."); :}
  | declaracion {: anuncio("Regla 4: declaraciones ::= declaracion."); :}
;

declaracion ::=
  COR_ABRE ID_VAR:id otros_tipos TIPO_DATO:tipo COR_CIERRA
  {:
    anuncio("Regla 5: declaracion ::= COR_ABRE ID_VAR(" + id + ") otros_tipos TIPO_DATO(" + tipo + ") COR_CIERRA.");
    colaIds.addLast((String) id);
    pilaTipos.push((String) tipo);
    procesarIdsYTipos();
  :}
;

otros_tipos ::=

  COMA ID_VAR:id otros_tipos TIPO_DATO:tipo COMA
  {:
    anuncio("Regla 6: otros_tipos ::= COMA ID_VAR(" + id + ") otros_tipos TIPO_DATO(" + tipo + ") COMA.");
    colaIds.addLast((String) id);
    pilaTipos.push((String) tipo);
  :}

  | COR_CIERRA ASIGNA_TIPO COR_ABRE
  {:
    anuncio("Regla 7: otros_tipos ::= COR_CIERRA ASIGNA_TIPO COR_ABRE.");
    inicializarPilaYCola();
  :}
;

seccion_de_programa ::= PROG_COMIENZO conjunto_de_sentencias PROG_FIN {: anuncio("Regla 8: seccion_de_programa ::= PROG_COMIENZO conjunto_de_sentencias PROG_FIN."); :};

conjunto_de_sentencias ::=
  sentencia conjunto_de_sentencias {: anuncio("Regla 9: conjunto_de_sentencias ::= sentencia conjunto_de_sentencias."); :}
  | sentencia {: anuncio("Regla 10: conjunto_de_sentencias ::= sentencia."); :}
;

sentencia ::=
	asignacion {: anuncio("Regla 11: sentencia ::= asignacion."); :}
	| seleccion {: anuncio("Regla 12: sentencia ::= seleccion."); :}
	| iteracion {: anuncio("Regla 13: sentencia ::= iteracion."); :}
	| nt_write {: anuncio("Regla 14: sentencia ::= nt_write."); :}
;

nt_write ::=

  WRITE ID_VAR:id PUNTO_COMA
  {:
    anuncio("Regla 15: nt_write ::= WRITE ID_VAR(" + id + ") PUNTO_COMA.");
    verificarTipo((String) id);
  :}

  | WRITE CONST_FLOAT:constante PUNTO_COMA {: anuncio("Regla 16: nt_write ::= WRITE CONST_FLOAT(" + constante + ") PUNTO_COMA."); :}
  | WRITE CONST_INT:constante PUNTO_COMA {: anuncio("Regla 17: nt_write ::= WRITE CONST_INT(" + constante + ") PUNTO_COMA."); :}
  | WRITE CONST_STR:constante PUNTO_COMA {: anuncio("Regla 18: nt_write ::= WRITE CONST_STR(" + constante + ") PUNTO_COMA."); :}
  | WRITE position PUNTO_COMA {: anuncio("Regla 19: nt_write ::= WRITE position PUNTO_COMA."); :}
;

asignacion ::=

  ID_VAR:id ASIGNA_VAR expresion PUNTO_COMA
  {:
    anuncio("Regla 20: asignacion ::= ID_VAR(" + id + ") ASIGNA_VAR expresion PUNTO_COMA.");
    verificarTipo((String) id);
  :}

  | ID_VAR:id ASIGNA_VAR CONST_STR:constante PUNTO_COMA
  {:
    anuncio("Regla 21: asignacion ::= ID_VAR(" + id + ") ASIGNA_VAR CONST_STR(" + constante + ") PUNTO_COMA.");
    verificarTipo((String) id);
  :}
;

seleccion ::=
  IF PAR_ABRE condicion PAR_CIERRA LLAVE_ABRE conjunto_de_sentencias LLAVE_CIERRA {: anuncio("Regla 22: seleccion ::= IF PAR_ABRE condicion PAR_CIERRA LLAVE_ABRE conjunto_de_sentencias LLAVE_CIERRA."); :}
  | IF PAR_ABRE condicion PAR_CIERRA LLAVE_ABRE conjunto_de_sentencias LLAVE_CIERRA else {: anuncio("Regla 23: seleccion ::= IF PAR_ABRE condicion PAR_CIERRA LLAVE_ABRE conjunto_de_sentencias LLAVE_CIERRA else."); :}
  | IF PAR_ABRE condicion PAR_CIERRA LLAVE_ABRE LLAVE_CIERRA {: anuncio("Regla 24: seleccion ::= IF PAR_ABRE condicion PAR_CIERRA LLAVE_ABRE LLAVE_CIERRA."); :}
  | IF PAR_ABRE condicion PAR_CIERRA LLAVE_ABRE LLAVE_CIERRA else {: anuncio("Regla 25: seleccion ::= IF PAR_ABRE condicion PAR_CIERRA LLAVE_ABRE LLAVE_CIERRA else."); :}
;

else ::=
  ELSE seleccion {: anuncio("Regla 26: else ::= ELSE seleccion."); :}
  | ELSE LLAVE_ABRE conjunto_de_sentencias LLAVE_CIERRA {: anuncio("Regla 27: else ::= ELSE LLAVE_ABRE conjunto_de_sentencias LLAVE_CIERRA."); :}
  | ELSE LLAVE_ABRE LLAVE_CIERRA {: anuncio("Regla 28: else ::= ELSE LLAVE_ABRE LLAVE_CIERRA."); :}
;

iteracion ::= WHILE PAR_ABRE condicion PAR_CIERRA LLAVE_ABRE conjunto_de_sentencias LLAVE_CIERRA {: anuncio("Regla 29: iteracion ::= WHILE PAR_ABRE condicion PAR_CIERRA LLAVE_ABRE conjunto_de_sentencias LLAVE_CIERRA."); :};

condicion ::=
  comparacion {: anuncio("Regla 30: condicion ::= comparacion."); :}
  | comparacion AND comparacion {: anuncio("Regla 31: condicion ::= comparacion AND comparacion."); :}
  | comparacion OR comparacion {: anuncio("Regla 32: condicion ::= comparacion OR comparacion."); :}
;

comparacion ::= expresion comparador expresion {: anuncio("Regla 33: comparacion ::= expresion comparador expresion."); :};

comparador ::=
  IGUAL {: anuncio("Regla 34: comparador ::= IGUAL."); :}
  | MAYOR {: anuncio("Regla 35: comparador ::= MAYOR."); :}
  | MAYOR_IGUAL {: anuncio("Regla 36: comparador ::= MAYOR_IGUAL."); :}
  | MENOR {: anuncio("Regla 37: comparador ::= MENOR."); :}
  | MENOR_IGUAL {: anuncio("Regla 38: comparador ::= MENOR_IGUAL."); :}
  | DISTINTO {: anuncio("Regla 39: comparador ::= DISTINTO."); :}
;

expresion ::=
  expresion SUMA termino {: anuncio("Regla 40: expresion ::= expresion SUMA termino."); :}
  | expresion RESTA termino {: anuncio("Regla 41: expresion ::= expresion RESTA termino."); :}
  | termino {: anuncio("Regla 42: expresion ::= termino."); :}
;

termino ::=
  termino DIVIDE factor {: anuncio("Regla 43: termino ::= termino DIVIDE factor."); :}
  | termino MULTIPLICA factor {: anuncio("Regla 44: termino ::= termino MULTIPLICA factor."); :}
  | factor {: anuncio("Regla 45: termino ::= factor."); :}
;

factor ::=
  ID_VAR:id {:
    anuncio("Regla 46: factor ::= ID_VAR(" + id + ").");
    verificarTipo((String) id);
  :}
  | CONST_FLOAT:constante {: anuncio("Regla 47: factor ::= CONST_FLOAT(" + constante + ")."); :}
  | CONST_INT:constante {: anuncio("Regla 48: factor ::= CONST_INT(" + constante + ")."); :}
  | position {: anuncio("Regla 49: factor ::= position."); :}
  | PAR_ABRE expresion PAR_CIERRA {: anuncio("Regla 50: factor ::= PAR_ABRE expresion PAR_CIERRA."); :}
;

position ::=
  POSITION PAR_ABRE CONST_INT:constante PUNTO_COMA COR_ABRE lista_enteros COR_CIERRA PAR_CIERRA {: anuncio("Regla 51: position ::= POSITION PAR_ABRE CONST_INT(" + constante + ") PUNTO_COMA COR_ABRE lista_enteros COR_CIERRA PAR_CIERRA."); :}
  | POSITION PAR_ABRE CONST_INT:constante PUNTO_COMA COR_ABRE COR_CIERRA PAR_CIERRA {: anuncio("Regla 52: position ::= POSITION PAR_ABRE CONST_INT(" + constante + ") PUNTO_COMA COR_ABRE COR_CIERRA PAR_CIERRA."); :}
;

lista_enteros ::=
  CONST_INT:constante mas_enteros {: anuncio("Regla 53: lista_enteros ::= CONST_INT(" + constante + ") mas_enteros."); :}
  | CONST_INT:constante {: anuncio("Regla 54: lista_enteros ::= CONST_INT(" + constante + ")."); :}
;

mas_enteros ::=
  COMA CONST_INT:constante mas_enteros {: anuncio("Regla 55: mas_enteros ::= COMA CONST_INT(" + constante + ") mas_enteros."); :}
  | COMA CONST_INT:constante {: anuncio("Regla 56: mas_enteros ::= COMA CONST_INT(" + constante + ")."); :}
;
